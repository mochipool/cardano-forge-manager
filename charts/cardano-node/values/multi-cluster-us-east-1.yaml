# Multi-Cluster Block Producer - Primary Cluster (US-East-1)
# This configuration deploys the PRIMARY cluster in a multi-region setup
# Priority 1 ensures this cluster forges blocks when healthy

# ===========================================
# REPLICA CONFIGURATION
# ===========================================
replicaCount: 3

# ===========================================
# CARDANO NODE CONFIGURATION
# ===========================================
cardanoNode:
  network: "mainnet"
  magic: "764824073"
  
  # Block producer mode
  blockProducer: true
  startAsNonProducing: true
  
  # Disable Mithril for production
  mithril:
    enabled: false
    restoreSnapshot: false

# ===========================================
# FORGE MANAGER V2.0 CONFIGURATION
# ===========================================
forgeManager:
  enabled: true
  
  # Production settings
  metricsPort: 8000
  socketWaitTimeout: 120
  sleepInterval: 10
  logLevel: "INFO"
  
  # ===========================================
  # MULTI-TENANT CONFIGURATION (REQUIRED)
  # ===========================================
  multiTenant:
    enabled: true
    pool:
      id: "pool1abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmno"  # Replace with your pool ID
      idHex: ""  # Optional: hex format pool ID
      name: "My Cardano Pool"
      ticker: "MYPOOL"  # Replace with your pool ticker
    
    application:
      type: "block-producer"
      environment: "production"
  
  # ===========================================
  # CLUSTER MANAGEMENT (MULTI-CLUSTER)
  # ===========================================
  clusterManagement:
    enabled: true
    
    # Region configuration
    region: "us-east-1"  # Geographic identifier
    
    # Priority (1 = highest, this is the primary cluster)
    priority: 1
    
    # Forge state
    forgeState: "Priority-based"  # Enabled | Disabled | Priority-based
    
    # Health check configuration
    healthCheck:
      enabled: true
      endpoint: "https://monitoring.example.com/api/health/cardano/us-east-1"  # Replace with your monitoring endpoint
      interval: 30  # Check every 30 seconds
      timeout: 10   # Timeout after 10 seconds
      failureThreshold: 3  # Fail after 3 consecutive failures
      headers: {}
        # Optional authentication:
        # Authorization: "Bearer YOUR_TOKEN"
    
    # Manual override (for maintenance)
    override:
      enabled: false
      reason: ""
      expiresAt: ""

# ===========================================
# STORAGE CONFIGURATION
# ===========================================
persistence:
  enabled: true
  size: 400Gi
  # storageClass: "gp3"  # AWS example
  annotations:
    volume.beta.kubernetes.io/storage-class: "fast"

# ===========================================
# RESOURCE CONFIGURATION (PRODUCTION)
# ===========================================
resources:
  cardanoNode:
    limits:
      cpu: 4000m
      memory: 24Gi
    requests:
      cpu: 2000m
      memory: 20Gi
  
  forgeManager:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

# ===========================================
# SERVICE CONFIGURATION
# ===========================================
service:
  p2p:
    type: LoadBalancer
    annotations:
      # AWS NLB with cross-zone load balancing
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"

# ===========================================
# MONITORING
# ===========================================
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true  # Enable if using Prometheus Operator
    interval: 30s
    labels:
      release: prometheus
      cluster: us-east-1

# ===========================================
# POD SCHEDULING
# ===========================================
# Anti-affinity to spread pods across nodes
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - cardano-node
          topologyKey: kubernetes.io/hostname

# Node affinity (optional - pin to specific node pool)
# nodeSelector:
#   workload: cardano-producer

# ===========================================
# POD LABELS FOR MONITORING
# ===========================================
podLabels:
  cluster: "us-east-1"
  region: "us-east"
  priority: "primary"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "12798"
  prometheus.io/path: "/metrics"

# ===========================================
# DEPLOYMENT INSTRUCTIONS
# ===========================================
# 1. Install CRDs (once per cluster):
#    helm install cardano-forge-crds charts/cardano-forge-crds \
#      --namespace cardano-system --create-namespace
#
# 2. Create namespace:
#    kubectl create namespace cardano-mainnet
#
# 3. Create secrets:
#    kubectl create secret generic cardano-forging-keys \
#      --from-file=kes.skey=path/to/kes.skey \
#      --from-file=vrf.skey=path/to/vrf.skey \
#      --from-file=node.cert=path/to/node.cert \
#      --namespace cardano-mainnet
#
# 4. Deploy primary cluster:
#    helm install cardano-bp-us-east-1 charts/cardano-node \
#      --namespace cardano-mainnet \
#      -f values/multi-cluster-us-east-1.yaml
#
# 5. Verify deployment:
#    kubectl get pods -n cardano-mainnet
#    kubectl get cardanoforgeclusters -n cardano-mainnet
#    kubectl logs -f -l app.kubernetes.io/name=cardano-node -c cardano-forge-manager -n cardano-mainnet
#
# 6. Check cluster status:
#    kubectl get cardanoforgeclusters -o custom-columns='NAME:.metadata.name,STATE:.status.effectiveState,PRIORITY:.status.effectivePriority,FORGING:.status.forgingEnabled,HEALTHY:.status.healthStatus.healthy'
