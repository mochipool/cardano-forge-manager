# Mainnet Block Producer - Production Ready Example
# This is a complete, production-ready block producer configuration for Cardano Mainnet
# Optimized for high availability, security, and performance

# ===========================================
# BASIC CONFIGURATION
# ===========================================
replicaCount: 3  # Multiple replicas for HA with leader election

# ===========================================
# CARDANO NODE CONFIGURATION
# ===========================================
cardanoNode:
  network: "mainnet"
  magic: "764824073"
  
  # Block producer configuration
  blockProducer: true
  startAsNonProducing: true  # Start non-producing until fully synced and leader elected
  
  # Enable Mithril for fast sync
  mithril:
    enabled: true
    restoreSnapshot: true
    aggregatorEndpoint: "https://aggregator.release-mainnet.api.mithril.network/aggregator"
    genesisVerificationKey: "5b3133312c36362c3134302c3138352c3133382c31312c3233372c3230372c3235302c3134342c32372c322c3138382c33302c31322c38312c3135352c3230342c31302c3137392c37352c32332c3133382c3139362c3231372c352c31342c32302c35372c37392c33392c3137365d"
    ancillaryVerificationKey: "5b32332c37312c39362c3133332c34372c3235332c3232362c3133362c3233352c35372c3136342c3130362c3138362c322c32312c32392c3132302c3136332c38392c3132312c3137372c3133382c3230382c3133382c3231342c39392c35382c32322c302c35382c332c36395d"

  # Mainnet configuration
  config:
    requiresNetworkMagic: "RequiresNoMagic"

  # Mainnet network topology (private - only connects to own relays)
  topology:
    bootstrapPeers:
      - address: "backbone.cardano.iog.io"
        port: 3001
    localRoots:
      - accessPoints:
          - address: "cardano-relay-cardano-node-p2p.cardano-mainnet.svc.cluster.local"  # Relay 1 Internal DNS Name
            port: 3001
            description: "relay-1"
          - address: "cardano-relay2-cardano-node-p2p.cardano-mainnet.svc.cluster.local"  # Relay 2 Internal DNS Name
            port: 3001
            description: "relay-2"
        advertise: false
        trustable: true
        hotValency: 2
    publicRoots:
      - accessPoints: []
        advertise: false
    useLedgerAfterSlot: 128908821

# ===========================================
# FORGE MANAGER V2.0
# ===========================================
forgeManager:
  enabled: true
  
  # Basic configuration
  metricsPort: 8000
  socketWaitTimeout: 300  # Longer timeout for mainnet
  sleepInterval: 5
  logLevel: "INFO"
  
  # IMPORTANT: Set the secret name for your forging keys
  secretName: "cardano-forging-keys"  # Must match the secret you create manually
  
  # Multi-tenant configuration (required for v2.0)
  multiTenant:
    enabled: true
    
    pool:
      # IMPORTANT: Replace with your actual mainnet pool ID
      id: "pool1your-actual-mainnet-pool-id-here-replace-this-value"
      name: "Your Pool Name"
      ticker: "YOUR"
    
    application:
      type: "block-producer"
      environment: "production"
  
  # Enable cluster management for production HA
  clusterManagement:
    enabled: true
    region: "us-east-1"  # Replace with your region
    priority: 1  # Lower number = higher priority
    forgeState: "Priority-based"
    
    # Optional health check for advanced setups
    healthCheck:
      enabled: false
      # endpoint: "http://health-service:8080/health"
      # interval: 30
      # timeout: 10
      # failureThreshold: 3
  
  # Legacy CRD support
  legacy:
    crd:
      cardanoLeader:
        enabled: true

# ===========================================
# STORAGE CONFIGURATION
# ===========================================
persistence:
  enabled: true
  size: 400Gi  # Mainnet requires substantial storage
  # storageClass: "fast-ssd"  # Use high-performance storage class for production
  annotations:
    # Example for AWS EBS volume encryption
    # ebs.csi.aws.com/encrypted: "true"

# ===========================================
# RESOURCE CONFIGURATION (Production)
# ===========================================
resources:
  cardanoNode:
    limits:
      cpu: 6000m    # Higher CPU for mainnet block production
      memory: 32Gi  # Higher memory for mainnet
    requests:
      cpu: 3000m
      memory: 16Gi
  
  forgeManager:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

# ===========================================
# NETWORKING (Private - No external access)
# ===========================================
service:
  p2p:
    type: ClusterIP  # Internal only - connects through relays
    port: 3001

# ===========================================
# MONITORING
# ===========================================
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true  # Enable for production monitoring
    interval: 15s  # More frequent monitoring for block producers
    scrapeTimeout: 5s

# ===========================================
# POD CONFIGURATION
# ===========================================
podLabels:
  network: "mainnet"
  environment: "production"
  pool-ticker: "YOUR"  # Replace with your ticker
  node-type: "block-producer"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "12798"
  prometheus.io/path: "/metrics"
  # Add backup annotations if using automated backups
  # backup.velero.io/backup-volumes: "cardano-data"

# ===========================================
# HIGH AVAILABILITY
# ===========================================
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - cardano-node
            - key: network
              operator: In
              values:
                - mainnet
            - key: node-type
              operator: In
              values:
                - block-producer
        topologyKey: kubernetes.io/hostname

# Node selector for dedicated block producer nodes
nodeSelector: {}
  # node-type: "cardano-block-producer"
  # instance-type: "high-cpu"

# ===========================================
# POD DISRUPTION BUDGET
# ===========================================
podDisruptionBudget:
  enabled: true
  minAvailable: 2  # Keep at least 2 replicas running (out of 3)

# ===========================================
# SECURITY CONTEXT (Enhanced for Production)
# ===========================================
securityContext:
  runAsNonRoot: true
  runAsUser: 10001
  runAsGroup: 10001
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

podSecurityContext:
  fsGroup: 10001
  runAsNonRoot: true
  runAsUser: 10001
  fsGroupChangePolicy: Always

# ===========================================
# NETWORK POLICY (Production Security)
# ===========================================
networkPolicy:
  enabled: true
  ingress:
    # Only allow connections from relay nodes
    customRules:
      - from:
          - podSelector:
              matchLabels:
                network: mainnet
                node-type: relay
        ports:
          - protocol: TCP
            port: 3001
    # Allow metrics from monitoring namespace
    metricsFromNamespaces:
      - monitoring
  egress:
    # Allow connections to relays
    customRules:
      - to:
          - podSelector:
              matchLabels:
                network: mainnet
                node-type: relay
        ports:
          - protocol: TCP
            port: 3001
    # Allow HTTPS for genesis files and Mithril
    httpsToCIDR: "0.0.0.0/0"

# ===========================================
# DEPLOYMENT INSTRUCTIONS
# ===========================================
# 
# This example provides a complete production mainnet block producer deployment.
# Follow these steps to deploy:
#
# 1. Install CRDs (required, one-time setup):
#    helm install cardano-forge-crds ./charts/cardano-forge-crds \
#      --namespace cardano-system --create-namespace
#
# 2. Create namespace:
#    kubectl create namespace cardano-mainnet
#
# 3. CRITICAL - Update pool configuration:
#    Edit this file and replace:
#    - forgeManager.multiTenant.pool.id with your actual pool ID
#    - forgeManager.multiTenant.pool.name with your pool name  
#    - forgeManager.multiTenant.pool.ticker with your ticker
#    - forgeManager.clusterManagement.region with your region
#    - podLabels.pool-ticker with your ticker
#
# 4. Create forging keys secret (HIGHLY SECURE):
#    kubectl create secret generic cardano-forging-keys \
#      --from-file=kes.skey=path/to/your/mainnet/kes.skey \
#      --from-file=vrf.skey=path/to/your/mainnet/vrf.skey \
#      --from-file=node.cert=path/to/your/mainnet/node.cert \
#      --namespace cardano-mainnet
#
#    SECURITY: Store these keys securely and rotate KES keys regularly!
#
# 5. Review resource allocation:
#    Ensure your cluster has sufficient resources (6 CPU, 32GB RAM per replica)
#
# 6. Deploy the block producer:
#    helm install cardano-bp ./charts/cardano-node \
#      --namespace cardano-mainnet \
#      --values ./charts/cardano-node/examples/mainnet-block-prod.yaml
#
# 7. Monitor the deployment:
#    kubectl logs -f cardano-bp-0 -c cardano-node -n cardano-mainnet
#    # You should see Mithril snapshot restoration messages
#
# 8. Monitor leader election:
#    kubectl get cardanoleaders -n cardano-mainnet
#    kubectl get cardanoforgeclusters -n cardano-mainnet
#
# 9. Monitor forge manager:
#    kubectl logs -f cardano-bp-0 -c forge-manager -n cardano-mainnet
#
# 10. Access metrics:
#     kubectl port-forward svc/cardano-bp-forge-metrics 8000:8000 -n cardano-mainnet
#     curl localhost:8000/metrics | grep cardano_
#
# ===========================================
# VERIFICATION STEPS
# ===========================================
#
# After deployment, verify everything is working:
#
# 1. Check node sync status:
#    kubectl exec -it cardano-bp-0 -c cardano-node -n cardano-mainnet -- \
#      cardano-cli query tip --mainnet --socket-path /ipc/node.socket
#
# 2. Verify leader election:
#    kubectl get cardanoleaders -n cardano-mainnet -o yaml
#
# 3. Check forging keys (leader only):
#    kubectl exec -it cardano-bp-0 -c forge-manager -n cardano-mainnet -- \
#      ls -la /opt/cardano/secrets/
#
# 4. Verify high availability setup:
#    kubectl get pods -n cardano-mainnet -o wide
#    # Verify pods are on different nodes
#
# 5. Test network connectivity:
#    kubectl exec -it cardano-bp-0 -c cardano-node -n cardano-mainnet -- \
#      nc -zv cardano-relay-cardano-node-p2p.cardano-mainnet.svc.cluster.local 3001
#
# 6. Monitor resource usage:
#    kubectl top pods -n cardano-mainnet
#
# ===========================================
# PRODUCTION OPERATIONS
# ===========================================
#
# Key operational procedures:
#
# 1. KES Key Rotation (CRITICAL):
#    - Monitor KES key expiration (typically every 90 days)
#    - Generate new KES keys before expiration
#    - Update the secret with new keys
#    - Forge manager will automatically distribute new keys
#
# 2. Monitoring and Alerting:
#    - Set up alerts for node sync status
#    - Monitor leader election changes
#    - Track block production metrics
#    - Alert on resource usage and capacity
#
# 3. Backup and Recovery:
#    - Regular snapshots of persistent volumes
#    - Backup forging keys securely (offline storage)
#    - Test recovery procedures
#
# 4. Security Updates:
#    - Regular updates to cardano-node images
#    - Monitor security advisories
#    - Update Kubernetes and OS regularly
#
# 5. Capacity Planning:
#    - Monitor storage growth and plan increases
#    - Scale resources based on network demands
#    - Plan for hardware refresh cycles
#
# ===========================================
# EXPECTED BEHAVIOR
# ===========================================
#
# 1. Three block producer pods will start with leader election
# 2. Only one pod will be active leader and forge blocks
# 3. Leader will have forging credentials distributed
# 4. Non-leaders will be hot standbys ready for failover
# 5. Automatic failover if leader pod fails
# 6. Comprehensive monitoring and metrics available
#
# ===========================================
# SECURITY CONSIDERATIONS
# ===========================================
#
# CRITICAL security measures for production:
#
# 1. Secret Management:
#    - Store forging keys in secure secret management system
#    - Use Kubernetes secrets with encryption at rest
#    - Rotate KES keys regularly (before expiration)
#    - Never expose VRF keys
#
# 2. Network Security:
#    - Block producer should not be directly accessible from internet
#    - Use NetworkPolicy to restrict pod-to-pod communication
#    - Connect only to trusted relay nodes
#    - Use VPN or private networks for management access
#
# 3. Access Control:
#    - Implement RBAC for Kubernetes access
#    - Use dedicated service accounts with minimal permissions
#    - Audit all access to block producer resources
#    - Separate environments (dev/staging/prod)
#
# 4. Monitoring and Logging:
#    - Comprehensive logging of all operations
#    - Monitor for unauthorized access attempts
#    - Set up alerting for security events
#    - Regular security audits
#
# ===========================================
# TROUBLESHOOTING
# ===========================================
#
# Common production issues:
#
# 1. Leader election issues:
#    kubectl describe cardanoleader -n cardano-mainnet
#    kubectl logs -f cardano-bp-0 -c forge-manager -n cardano-mainnet
#
# 2. KES key expiration:
#    Check logs for "KES key expired" messages
#    Generate and update new KES keys immediately
#
# 3. Node sync issues:
#    Check network connectivity to relays
#    Monitor resource usage (CPU, memory, storage)
#    Verify Mithril configuration
#
# 4. High resource usage:
#    Scale resources or move to dedicated nodes
#    Check for memory leaks or performance issues
#    Consider storage performance optimization
#
# 5. Security incidents:
#    Immediately rotate all secrets
#    Review access logs and audit trails
#    Check for unauthorized changes
#    Isolate affected systems