{{- include "cardano-node.validateMultiTenant" . -}}
{{- include "cardano-node.validateClusterManagement" . -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cardano-node.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cardano-node.labels" . | nindent 4 }}
  {{- with .Values.global.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "cardano-node.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: Parallel
  {{- with .Values.updateStrategy }}
  updateStrategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "cardano-node.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "cardano-node.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      shareProcessNamespace: true  # Required for forge manager to send SIGHUP to cardano-node
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cardano-node.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      
      # ===========================================
      # INIT CONTAINERS
      # ===========================================
      initContainers:
        # Setup init container
        - name: init-cardano-setup
          image: "busybox:1.37.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -e
              echo "$(date) [INIT] Setting up Cardano Node directories..."
              
              # Create data directories
              mkdir -p {{ .Values.cardanoNode.dataDir }}/db
              mkdir -p /ipc
              mkdir -p /opt/cardano/secrets
              mkdir -p /config/genesis
              
              # Note: emptyDir volumes are already writable, no need to chmod
              # Set permissions only on persistent volume directories
              chmod 755 {{ .Values.cardanoNode.dataDir }}/db || true
              
              # Copy config files from ConfigMap
              echo "$(date) [INIT] Copying configuration files..."
              cp -Lr /config-src/* /config/ || true
              
              # Download Byron genesis
              BYRON_URL="{{ include "cardano-node.byronGenesisUrl" . }}"
              if [ -n "$BYRON_URL" ]; then
                echo "$(date) [INIT] Downloading Byron genesis from $BYRON_URL"
                wget -q -O /config/genesis/byron-genesis.json "$BYRON_URL" || {
                  echo "$(date) [INIT] WARNING: Failed to download Byron genesis"
                }
              fi
              
              echo "$(date) [INIT] Setup complete"
          volumeMounts:
            - name: cardano-data
              mountPath: {{ .Values.cardanoNode.dataDir }}
            - name: cardano-config-src
              mountPath: /config-src
            - name: cardano-config
              mountPath: /config
            - name: socket-dir
              mountPath: /ipc
            - name: cardano-secrets-target
              mountPath: /opt/cardano/secrets
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        
        {{- if eq (include "cardano-node.forgeManagerEnabled" .) "true" }}
        # ===========================================
        # FORGE MANAGER SIDECAR (Native Sidecar Pattern)
        # ===========================================
        - name: cardano-forge-manager
          image: "{{ .Values.image.forgeManager.repository }}:{{ .Values.image.forgeManager.tag }}"
          imagePullPolicy: {{ .Values.image.forgeManager.pullPolicy }}
          restartPolicy: Always  # This makes it a native sidecar (K8s 1.29+)
          env:
            # Basic configuration
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_SOCKET
              value: {{ .Values.forgeManager.nodeSocket | quote }}
            - name: METRICS_PORT
              value: {{ .Values.forgeManager.metricsPort | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.forgeManager.logLevel | quote }}
            - name: SLEEP_INTERVAL
              value: {{ .Values.forgeManager.sleepInterval | quote }}
            - name: SOCKET_WAIT_TIMEOUT
              value: {{ .Values.forgeManager.socketWaitTimeout | quote }}
            - name: DISABLE_SOCKET_CHECK
              value: {{ .Values.forgeManager.disableSocketCheck | quote }}
            
            # Credential paths
            - name: SOURCE_KES_KEY
              value: {{ .Values.forgeManager.sourceKeys.kesKey | quote }}
            - name: SOURCE_VRF_KEY
              value: {{ .Values.forgeManager.sourceKeys.vrfKey | quote }}
            - name: SOURCE_OP_CERT
              value: {{ .Values.forgeManager.sourceKeys.opCert | quote }}
            - name: TARGET_KES_KEY
              value: {{ .Values.forgeManager.targetKeys.kesKey | quote }}
            - name: TARGET_VRF_KEY
              value: {{ .Values.forgeManager.targetKeys.vrfKey | quote }}
            - name: TARGET_OP_CERT
              value: {{ .Values.forgeManager.targetKeys.opCert | quote }}
            
            # Lease configuration
            - name: LEASE_NAME
              value: {{ include "cardano-node.leaseName" . | quote }}
            - name: LEASE_DURATION
              value: {{ .Values.forgeManager.legacy.lease.duration | quote }}
            
            # CRD configuration
            - name: CRD_GROUP
              value: "cardano.io"
            - name: CRD_VERSION
              value: "v1"
            - name: CRD_PLURAL
              value: "cardanoleaders"
            - name: CRD_NAME
              value: {{ include "cardano-node.cardanoLeaderName" . | quote }}
            
            # Network and pool configuration (always set for consistency)
            - name: CARDANO_NETWORK
              value: {{ .Values.cardanoNode.network | quote }}
            - name: NETWORK_MAGIC
              value: {{ include "cardano-node.networkMagic" . | quote }}
            
            {{- if eq (include "cardano-node.multiTenantEnabled" .) "true" }}
            # Multi-tenant configuration
            - name: POOL_ID
              value: {{ .Values.forgeManager.multiTenant.pool.id | quote }}
            {{- if .Values.forgeManager.multiTenant.pool.idHex }}
            - name: POOL_ID_HEX
              value: {{ .Values.forgeManager.multiTenant.pool.idHex | quote }}
            {{- end }}
            {{- if .Values.forgeManager.multiTenant.pool.name }}
            - name: POOL_NAME
              value: {{ .Values.forgeManager.multiTenant.pool.name | quote }}
            {{- end }}
            {{- if .Values.forgeManager.multiTenant.pool.ticker }}
            - name: POOL_TICKER
              value: {{ .Values.forgeManager.multiTenant.pool.ticker | quote }}
            {{- end }}
            - name: APPLICATION_TYPE
              value: {{ .Values.forgeManager.multiTenant.application.type | quote }}
            {{- end }}
            
            {{- if eq (include "cardano-node.clusterManagementEnabled" .) "true" }}
            # Cluster management configuration
            - name: ENABLE_CLUSTER_MANAGEMENT
              value: "true"
            - name: CLUSTER_REGION
              value: {{ .Values.forgeManager.clusterManagement.region | quote }}
            - name: CLUSTER_PRIORITY
              value: {{ .Values.forgeManager.clusterManagement.priority | quote }}
            - name: CLUSTER_ENVIRONMENT
              value: {{ .Values.forgeManager.multiTenant.application.environment | default "production" | quote }}
            {{- if .Values.forgeManager.clusterManagement.healthCheck.enabled }}
            - name: HEALTH_CHECK_ENDPOINT
              value: {{ .Values.forgeManager.clusterManagement.healthCheck.endpoint | quote }}
            - name: HEALTH_CHECK_INTERVAL
              value: {{ .Values.forgeManager.clusterManagement.healthCheck.interval | quote }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: cardano-secrets
              mountPath: /secrets
              readOnly: true
            - name: cardano-secrets-target
              mountPath: /opt/cardano/secrets
            - name: socket-dir
              mountPath: /ipc
            {{- with .Values.forgeManager.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: {{ .Values.forgeManager.metricsPort }}
              name: forge-metrics
              protocol: TCP
          resources:
            {{- toYaml .Values.resources.forgeManager | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        {{- end }}
      
      # ===========================================
      # MAIN CONTAINERS
      # ===========================================
      containers:
        # Cardano Node
        - name: cardano-node
          image: "{{ .Values.image.cardanoNode.repository }}:{{ .Values.image.cardanoNode.tag }}"
          imagePullPolicy: {{ .Values.image.cardanoNode.pullPolicy }}
          command:
            - "cardano-node"
            - "run"
            - "--config"
            - "{{ .Values.cardanoNode.configDir }}/config.json"
            - "--topology"
            - "{{ .Values.cardanoNode.configDir }}/topology.json"
            - "--database-path"
            - "{{ .Values.cardanoNode.dataDir }}/db"
            - "--socket-path"
            - "{{ .Values.cardanoNode.socketPath }}"
            - "--host-addr"
            - "0.0.0.0"
            - "--port"
            - "{{ .Values.cardanoNode.port }}"
            {{- if .Values.cardanoNode.startAsNonProducing }}
            - "--start-as-non-producing-node"
            {{- end }}
          env:
            {{- with .Values.extraEnvVars }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: {{ .Values.cardanoNode.port }}
              name: p2p
              protocol: TCP
            - containerPort: {{ .Values.cardanoNode.prometheus.port }}
              name: metrics
              protocol: TCP
            {{- if .Values.cardanoNode.ekgPort }}
            - containerPort: {{ .Values.cardanoNode.ekgPort }}
              name: ekg
              protocol: TCP
            {{- end }}
          volumeMounts:
            - name: cardano-data
              mountPath: {{ .Values.cardanoNode.dataDir }}
            - name: cardano-config
              mountPath: {{ .Values.cardanoNode.configDir }}
            - name: socket-dir
              mountPath: /ipc
            {{- if eq (include "cardano-node.forgeManagerEnabled" .) "true" }}
            - name: cardano-secrets-target
              mountPath: /opt/cardano/secrets
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.healthChecks.cardanoNode.livenessProbe.enabled }}
          livenessProbe:
            {{- omit .Values.healthChecks.cardanoNode.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.healthChecks.cardanoNode.readinessProbe.enabled }}
          readinessProbe:
            {{- omit .Values.healthChecks.cardanoNode.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources.cardanoNode | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        
        {{- if .Values.submitApi.enabled }}
        # Submit API Sidecar
        - name: submit-api
          image: "{{ .Values.image.submitApi.repository }}:{{ .Values.image.submitApi.tag }}"
          imagePullPolicy: {{ .Values.image.submitApi.pullPolicy }}
          env:
            - name: CARDANO_NODE_SOCKET_PATH
              value: {{ .Values.cardanoNode.socketPath | quote }}
            - name: SUBMIT_API_PORT
              value: {{ .Values.submitApi.port | quote }}
            {{- if .Values.submitApi.skipNodeCheck }}
            - name: SKIP_NODE_CHECK
              value: "true"
            {{- end }}
            {{- if .Values.submitApi.socketTimeout }}
            - name: SOCKET_TIMEOUT
              value: {{ .Values.submitApi.socketTimeout | quote }}
            {{- end }}
          ports:
            - containerPort: {{ .Values.submitApi.port }}
              name: submit-api
              protocol: TCP
            {{- if .Values.submitApi.healthPort }}
            - containerPort: {{ .Values.submitApi.healthPort }}
              name: health
              protocol: TCP
            {{- end }}
          volumeMounts:
            - name: socket-dir
              mountPath: /ipc
          resources:
            {{- toYaml .Values.resources.submitApi | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        {{- end }}
        
        {{- if .Values.mithrilSigner.enabled }}
        # Mithril Signer Sidecar
        - name: mithril-signer
          image: "{{ .Values.image.mithrilSigner.repository }}:{{ .Values.image.mithrilSigner.tag }}"
          imagePullPolicy: {{ .Values.image.mithrilSigner.pullPolicy }}
          env:
            - name: CARDANO_NODE_SOCKET_PATH
              value: {{ .Values.cardanoNode.socketPath | quote }}
            - name: MITHRIL_PARTY_ID
              value: {{ .Values.mithrilSigner.partyId | quote }}
            - name: MITHRIL_AGGREGATOR_ENDPOINT
              value: {{ .Values.mithrilSigner.aggregatorEndpoint | quote }}
            - name: NETWORK
              value: {{ .Values.cardanoNode.network | quote }}
          ports:
            - containerPort: {{ .Values.mithrilSigner.port }}
              name: mithril
              protocol: TCP
          volumeMounts:
            - name: socket-dir
              mountPath: /ipc
            - name: cardano-data
              mountPath: {{ .Values.cardanoNode.dataDir }}
              readOnly: true
          resources:
            {{- toYaml .Values.resources.mithrilSigner | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        {{- end }}
      
      # ===========================================
      # VOLUMES
      # ===========================================
      volumes:
        # ConfigMap for cardano-node config
        - name: cardano-config-src
          configMap:
            name: {{ include "cardano-node.fullname" . }}-config
        
        # EmptyDir for processed config
        - name: cardano-config
          emptyDir: {}
        
        # EmptyDir for node socket
        - name: socket-dir
          emptyDir: {}
        
        {{- if eq (include "cardano-node.forgeManagerEnabled" .) "true" }}
        # Secret for forging keys
        - name: cardano-secrets
          secret:
            secretName: {{ include "cardano-node.forgingKeysSecretName" . }}
            defaultMode: 0600
        
        # EmptyDir for target keys (where forge manager copies keys)
        - name: cardano-secrets-target
          emptyDir: {}
        {{- end }}
        
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  
  # ===========================================
  # VOLUME CLAIM TEMPLATES
  # ===========================================
  {{- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: cardano-data
        labels:
          {{- include "cardano-node.labels" . | nindent 10 }}
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- else if .Values.persistence.existingClaim }}
  # Using existing PVC
  # Note: This requires manual PVC creation before chart installation
  {{- end }}
