# Example values.yaml configuration for startup probe functionality
# This shows how to configure the startup synchronization between
# forge manager and cardano-node containers

# ===========================================
# BASIC BLOCK PRODUCER CONFIGURATION
# ===========================================
replicaCount: 3  # HA setup with 3 replicas

# Enable block producer mode
cardanoNode:
  blockProducer: true
  startAsNonProducing: true  # Let forge manager control forging state
  network: "mainnet"

# ===========================================
# FORGE MANAGER CONFIGURATION
# ===========================================
forgeManager:
  enabled: true  # Enable forge manager sidecar
  
  # Credential file paths
  sourceKeys:
    kesKey: "/secrets/kes.skey"
    vrfKey: "/secrets/vrf.skey" 
    opCert: "/secrets/node.cert"
  
  targetKeys:
    kesKey: "/opt/cardano/secrets/kes.skey"
    vrfKey: "/opt/cardano/secrets/vrf.skey"
    opCert: "/opt/cardano/secrets/node.cert"
  
  # Multi-tenant configuration
  multiTenant:
    enabled: true
    pool:
      id: "pool1abcdef1234567890abcdef1234567890abcdef1234567890abcdef12"
      ticker: "MYPOOL"
      name: "My Cardano Pool"

# ===========================================
# HEALTH CHECKS WITH STARTUP PROBE
# ===========================================
healthChecks:
  # Cardano node health checks
  cardanoNode:
    livenessProbe:
      enabled: false  # Disable to prevent restarts
    
    readinessProbe:
      enabled: true
      httpGet:
        path: /metrics
        port: 12798
      initialDelaySeconds: 60
      periodSeconds: 15
      timeoutSeconds: 10
      failureThreshold: 5

  # Forge manager health checks with startup probe
  forgeManager:
    # Startup probe ensures credentials are ready before cardano-node starts
    startupProbe:
      enabled: true  # This is the key feature!
      httpGet:
        path: /startup-status
        port: 8000
      initialDelaySeconds: 5   # Start checking quickly after container start
      periodSeconds: 3         # Check every 3 seconds during startup
      timeoutSeconds: 2        # Short timeout for quick feedback
      failureThreshold: 60     # Allow up to 3 minutes (60 * 3s = 180s)
      successThreshold: 1      # Only need one success to proceed
    
    # Readiness probe for traffic routing
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
        port: 8000
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 3
      failureThreshold: 3
    
    # Liveness probe for container health
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
        port: 8000
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 5

# ===========================================
# ALTERNATIVE TIMING CONFIGURATIONS
# ===========================================

# For slower storage/network environments:
# healthChecks:
#   forgeManager:
#     startupProbe:
#       enabled: true
#       httpGet:
#         path: /startup-status
#         port: 8000
#       initialDelaySeconds: 10   # Wait longer before first check
#       periodSeconds: 5          # Check every 5 seconds
#       timeoutSeconds: 3         # Longer timeout
#       failureThreshold: 36      # Still allow 3 minutes (36 * 5s = 180s)

# For faster environments:
# healthChecks:
#   forgeManager:
#     startupProbe:
#       enabled: true
#       httpGet:
#         path: /startup-status
#         port: 8000
#       initialDelaySeconds: 2    # Check very quickly
#       periodSeconds: 2          # Check every 2 seconds
#       timeoutSeconds: 1         # Very short timeout
#       failureThreshold: 60      # Allow 2 minutes (60 * 2s = 120s)

# ===========================================
# RESOURCE CONFIGURATION
# ===========================================
resources:
  cardanoNode:
    limits:
      cpu: 2000m
      memory: 8Gi
    requests:
      cpu: 1000m
      memory: 4Gi
  
  forgeManager:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi

# ===========================================
# SECURITY CONFIGURATION
# ===========================================
podSecurityContext:
  fsGroup: 10001
  runAsNonRoot: true
  runAsUser: 10001
  fsGroupChangePolicy: Always

securityContext:
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: "RuntimeDefault"
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 10001

# ===========================================
# MONITORING
# ===========================================
monitoring:
  enabled: true
  
serviceMonitor:
  enabled: false  # Enable if using Prometheus Operator

# ===========================================
# PERSISTENCE
# ===========================================
persistence:
  enabled: true
  size: 100Gi
  storageClass: "fast-ssd"  # Use appropriate storage class