# Multi-Tenant Cardano Forge Manager Deployments
# This example shows how to deploy multiple pools across different networks in the same Kubernetes cluster

apiVersion: v1
kind: Namespace
metadata:
  name: spo-operations
  labels:
    cardano.io/managed-by: cardano-forge-manager
    cardano.io/multi-tenant: "true"

---
# Example 1: Mainnet Primary Pool
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mainnet-pool1abcd-bp
  namespace: spo-operations
  labels:
    app: cardano-bp
    cardano.io/network: mainnet
    cardano.io/pool-id: pool1abcd...xyz
    cardano.io/pool-ticker: PRIME
    cardano.io/application: block-producer
spec:
  replicas: 3
  serviceName: mainnet-pool1abcd-bp
  selector:
    matchLabels:
      app: cardano-bp
      cardano.io/network: mainnet
      cardano.io/pool-id: pool1abcd...xyz
  template:
    metadata:
      labels:
        app: cardano-bp
        cardano.io/network: mainnet
        cardano.io/pool-id: pool1abcd...xyz
        cardano.io/pool-ticker: PRIME
        cardano.io/application: block-producer
    spec:
      serviceAccountName: cardano-forge-manager
      shareProcessNamespace: true
      containers:
      - name: forge-manager
        image: cardano-forge-manager:latest
        env:
        # Pod identification
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # Multi-tenant configuration
        - name: CARDANO_NETWORK
          value: "mainnet"
        - name: POOL_ID
          value: "pool1abcd...xyz"
        - name: POOL_ID_HEX
          value: "abcd...xyz"
        - name: POOL_NAME
          value: "Primary Stake Pool"
        - name: POOL_TICKER
          value: "PRIME"
        - name: NETWORK_MAGIC
          value: "764824073"
        - name: APPLICATION_TYPE
          value: "block-producer"
        
        # Cluster management
        - name: ENABLE_CLUSTER_MANAGEMENT
          value: "true"
        - name: CLUSTER_REGION
          value: "us-east-1"
        - name: CLUSTER_PRIORITY
          value: "1"
        
        # Health check (pool-specific endpoint)
        - name: HEALTH_CHECK_ENDPOINT
          value: "http://prometheus:9090/api/v1/query?query=up{job='cardano-node',network='mainnet',pool_id='pool1abcd'}"
        - name: HEALTH_CHECK_INTERVAL
          value: "30"
        
        # Credentials paths (pool-specific)
        - name: SOURCE_KES_KEY
          value: "/secrets/mainnet-pool1abcd/kes.skey"
        - name: SOURCE_VRF_KEY
          value: "/secrets/mainnet-pool1abcd/vrf.skey"
        - name: SOURCE_OP_CERT
          value: "/secrets/mainnet-pool1abcd/node.cert"
        - name: TARGET_KES_KEY
          value: "/opt/cardano/secrets/kes.skey"
        - name: TARGET_VRF_KEY
          value: "/opt/cardano/secrets/vrf.skey"
        - name: TARGET_OP_CERT
          value: "/opt/cardano/secrets/node.cert"
        
        # Lease configuration (pool-scoped)
        - name: LEASE_NAME
          value: "cardano-leader-mainnet-pool1abcd"
        - name: LEASE_DURATION
          value: "15"
        
        ports:
        - name: metrics
          containerPort: 8000
        
        volumeMounts:
        - name: secrets
          mountPath: /secrets/mainnet-pool1abcd
          readOnly: true
        - name: ipc
          mountPath: /ipc
        
      - name: cardano-node
        image: inputoutput/cardano-node:8.9.0
        command:
        - /bin/bash
        - -c
        - |
          cardano-node run \
            --config /config/mainnet/config.json \
            --topology /config/mainnet/topology.json \
            --database-path /data/db \
            --socket-path /ipc/node.socket \
            --host-addr 0.0.0.0 \
            --port 3000 \
            --shelley-kes-key /opt/cardano/secrets/kes.skey \
            --shelley-vrf-key /opt/cardano/secrets/vrf.skey \
            --shelley-operational-certificate /opt/cardano/secrets/node.cert
        
        ports:
        - name: cardano
          containerPort: 3000
        
        volumeMounts:
        - name: config
          mountPath: /config/mainnet
        - name: data
          mountPath: /data
        - name: ipc
          mountPath: /ipc
        
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
      
      volumes:
      - name: secrets
        secret:
          secretName: mainnet-pool1abcd-credentials
      - name: config
        configMap:
          name: mainnet-cardano-config
      - name: ipc
        emptyDir: {}
  
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi

---
# Example 2: Preprod Testing Pool (Same Pool ID, Different Network)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: preprod-pool1abcd-bp
  namespace: spo-operations
  labels:
    app: cardano-bp
    cardano.io/network: preprod
    cardano.io/pool-id: pool1abcd...xyz
    cardano.io/pool-ticker: PRIME
    cardano.io/application: block-producer
spec:
  replicas: 1  # Single replica for testing
  serviceName: preprod-pool1abcd-bp
  selector:
    matchLabels:
      app: cardano-bp
      cardano.io/network: preprod
      cardano.io/pool-id: pool1abcd...xyz
  template:
    metadata:
      labels:
        app: cardano-bp
        cardano.io/network: preprod
        cardano.io/pool-id: pool1abcd...xyz
        cardano.io/pool-ticker: PRIME
        cardano.io/application: block-producer
    spec:
      serviceAccountName: cardano-forge-manager
      shareProcessNamespace: true
      containers:
      - name: forge-manager
        image: cardano-forge-manager:latest
        env:
        # Pod identification
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # Multi-tenant configuration (Different network!)
        - name: CARDANO_NETWORK
          value: "preprod"
        - name: POOL_ID
          value: "pool1abcd...xyz"  # Same pool ID, different network
        - name: POOL_ID_HEX
          value: "abcd...xyz"
        - name: POOL_NAME
          value: "Primary Stake Pool (Testing)"
        - name: POOL_TICKER
          value: "PRIME"
        - name: NETWORK_MAGIC
          value: "1"  # Preprod magic
        - name: APPLICATION_TYPE
          value: "block-producer"
        
        # Cluster management (different CRD namespace)
        - name: ENABLE_CLUSTER_MANAGEMENT
          value: "true"
        - name: CLUSTER_REGION
          value: "us-east-1"
        - name: CLUSTER_PRIORITY
          value: "1"
        
        # Health check (network-specific)
        - name: HEALTH_CHECK_ENDPOINT
          value: "http://prometheus:9090/api/v1/query?query=up{job='cardano-node',network='preprod',pool_id='pool1abcd'}"
        
        # Credentials (network-specific secrets)
        - name: SOURCE_KES_KEY
          value: "/secrets/preprod-pool1abcd/kes.skey"
        - name: SOURCE_VRF_KEY
          value: "/secrets/preprod-pool1abcd/vrf.skey"
        - name: SOURCE_OP_CERT
          value: "/secrets/preprod-pool1abcd/node.cert"
        
        # Lease configuration (network + pool scoped)
        - name: LEASE_NAME
          value: "cardano-leader-preprod-pool1abcd"
        
        ports:
        - name: metrics
          containerPort: 8000
        
        volumeMounts:
        - name: secrets
          mountPath: /secrets/preprod-pool1abcd
          readOnly: true
        - name: ipc
          mountPath: /ipc
        
      - name: cardano-node
        image: inputoutput/cardano-node:8.9.0
        command:
        - /bin/bash
        - -c
        - |
          cardano-node run \
            --config /config/preprod/config.json \
            --topology /config/preprod/topology.json \
            --database-path /data/db \
            --socket-path /ipc/node.socket \
            --host-addr 0.0.0.0 \
            --port 3000 \
            --shelley-kes-key /opt/cardano/secrets/kes.skey \
            --shelley-vrf-key /opt/cardano/secrets/vrf.skey \
            --shelley-operational-certificate /opt/cardano/secrets/node.cert
        
        ports:
        - name: cardano
          containerPort: 3000
        
        volumeMounts:
        - name: config
          mountPath: /config/preprod
        - name: data
          mountPath: /data
        - name: ipc
          mountPath: /ipc
      
      volumes:
      - name: secrets
        secret:
          secretName: preprod-pool1abcd-credentials
      - name: config
        configMap:
          name: preprod-cardano-config
      - name: ipc
        emptyDir: {}
  
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
# Example 3: Second Mainnet Pool (Different Pool)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mainnet-pool1efgh-bp
  namespace: spo-operations
  labels:
    app: cardano-bp
    cardano.io/network: mainnet
    cardano.io/pool-id: pool1efgh...xyz
    cardano.io/pool-ticker: SECOND
    cardano.io/application: block-producer
spec:
  replicas: 3
  serviceName: mainnet-pool1efgh-bp
  selector:
    matchLabels:
      app: cardano-bp
      cardano.io/network: mainnet
      cardano.io/pool-id: pool1efgh...xyz
  template:
    metadata:
      labels:
        app: cardano-bp
        cardano.io/network: mainnet
        cardano.io/pool-id: pool1efgh...xyz
        cardano.io/pool-ticker: SECOND
        cardano.io/application: block-producer
    spec:
      serviceAccountName: cardano-forge-manager
      shareProcessNamespace: true
      containers:
      - name: forge-manager
        image: cardano-forge-manager:latest
        env:
        # Pod identification
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # Multi-tenant configuration (Different Pool!)
        - name: CARDANO_NETWORK
          value: "mainnet"
        - name: POOL_ID
          value: "pool1efgh...xyz"  # Different pool ID
        - name: POOL_ID_HEX
          value: "efgh...xyz"
        - name: POOL_NAME
          value: "Secondary Stake Pool"
        - name: POOL_TICKER
          value: "SECOND"
        - name: NETWORK_MAGIC
          value: "764824073"
        - name: APPLICATION_TYPE
          value: "block-producer"
        
        # Cluster management (different priority)
        - name: ENABLE_CLUSTER_MANAGEMENT
          value: "true"
        - name: CLUSTER_REGION
          value: "us-east-1"
        - name: CLUSTER_PRIORITY
          value: "2"  # Lower priority than primary pool
        
        # Health check (pool-specific)
        - name: HEALTH_CHECK_ENDPOINT
          value: "http://prometheus:9090/api/v1/query?query=up{job='cardano-node',network='mainnet',pool_id='pool1efgh'}"
        
        # Credentials (pool-specific)
        - name: SOURCE_KES_KEY
          value: "/secrets/mainnet-pool1efgh/kes.skey"
        - name: SOURCE_VRF_KEY
          value: "/secrets/mainnet-pool1efgh/vrf.skey"
        - name: SOURCE_OP_CERT
          value: "/secrets/mainnet-pool1efgh/node.cert"
        
        # Lease configuration (unique per pool)
        - name: LEASE_NAME
          value: "cardano-leader-mainnet-pool1efgh"
        
        ports:
        - name: metrics
          containerPort: 8000
        
        volumeMounts:
        - name: secrets
          mountPath: /secrets/mainnet-pool1efgh
          readOnly: true
        - name: ipc
          mountPath: /ipc
        
      - name: cardano-node
        image: inputoutput/cardano-node:8.9.0
        command:
        - /bin/bash
        - -c
        - |
          cardano-node run \
            --config /config/mainnet/config.json \
            --topology /config/mainnet/topology.json \
            --database-path /data/db \
            --socket-path /ipc/node.socket \
            --host-addr 0.0.0.0 \
            --port 3000 \
            --shelley-kes-key /opt/cardano/secrets/kes.skey \
            --shelley-vrf-key /opt/cardano/secrets/vrf.skey \
            --shelley-operational-certificate /opt/cardano/secrets/node.cert
        
        ports:
        - name: cardano
          containerPort: 3000
        
        volumeMounts:
        - name: config
          mountPath: /config/mainnet
        - name: data
          mountPath: /data
        - name: ipc
          mountPath: /ipc
      
      volumes:
      - name: secrets
        secret:
          secretName: mainnet-pool1efgh-credentials
      - name: config
        configMap:
          name: mainnet-cardano-config
      - name: ipc
        emptyDir: {}
  
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi

---
# Services for external access (network and pool specific)
apiVersion: v1
kind: Service
metadata:
  name: mainnet-pool1abcd-bp-metrics
  namespace: spo-operations
  labels:
    app: cardano-bp
    cardano.io/network: mainnet
    cardano.io/pool-id: pool1abcd...xyz
    component: metrics
spec:
  selector:
    app: cardano-bp
    cardano.io/network: mainnet
    cardano.io/pool-id: pool1abcd...xyz
  ports:
  - name: metrics
    port: 8000
    targetPort: 8000
  - name: cardano
    port: 3000
    targetPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: preprod-pool1abcd-bp-metrics
  namespace: spo-operations
  labels:
    app: cardano-bp
    cardano.io/network: preprod
    cardano.io/pool-id: pool1abcd...xyz
    component: metrics
spec:
  selector:
    app: cardano-bp
    cardano.io/network: preprod
    cardano.io/pool-id: pool1abcd...xyz
  ports:
  - name: metrics
    port: 8000
    targetPort: 8000
  - name: cardano
    port: 3000
    targetPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: mainnet-pool1efgh-bp-metrics
  namespace: spo-operations
  labels:
    app: cardano-bp
    cardano.io/network: mainnet
    cardano.io/pool-id: pool1efgh...xyz
    component: metrics
spec:
  selector:
    app: cardano-bp
    cardano.io/network: mainnet
    cardano.io/pool-id: pool1efgh...xyz
  ports:
  - name: metrics
    port: 8000
    targetPort: 8000
  - name: cardano
    port: 3000
    targetPort: 3000

---
# ServiceAccount and RBAC (shared across all deployments)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cardano-forge-manager
  namespace: spo-operations
  labels:
    app: cardano-forge-manager

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cardano-forge-manager-spo-operations
subjects:
- kind: ServiceAccount
  name: cardano-forge-manager
  namespace: spo-operations
roleRef:
  kind: ClusterRole
  name: cardano-forge-manager-multi-tenant
  apiGroup: rbac.authorization.k8s.io